pipeline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 60, unit: 'MINUTES')
    }
    agent {
      node {
      		label 'maven'
	}
    }

    environment {
        //TODO: Customize these variables for your environment
        DEV_PROJECT = "fharo-redhat-com-movies-dev"
        STAGE_PROJECT = "fharo-redhat-com-movies-stage"
        APP_GIT_URL = "https://github.com/fgharo/DO288-apps"
        NEXUS_SERVER = "http://nexus-common.apps.ocp-na2.prod.nextcle.com/repository/java"

        // DO NOT CHANGE THE GLOBAL VARS BELOW THIS LINE
        APP_NAME = "movies"
    }


    stages {

        stage('Compilation Check') {
            steps {
                echo '### Checking for compile errors ###'
		    /*
                sh '''
                        cd ${APP_NAME}
                        mvn -s settings.xml -B clean compile
                   '''
		   */
            }
        }

        stage('Run Unit Tests') {
            steps {
                echo '### Running unit tests ###'
		    /*
                sh '''
                        cd ${APP_NAME}
                        mvn -s settings.xml -B clean test
                   '''
		   */
            }
        }

        stage('Static Code Analysis') {
            steps {
                echo '### Running pmd on code ###'
		    /*
                sh '''
                        cd ${APP_NAME}
                        mvn -s settings.xml -B clean pmd:check
                   '''
		   */
            }
        }

        stage('Create fat JAR') {
            steps {
                echo '### Creating fat JAR ###'
                sh '''
                        cd ${APP_NAME}
                        mvn -s settings.xml -B clean package -DskipTests=true
                   '''
            }
        }

        stage('Launch new app in DEV env') {
            steps {            	
                echo '### Rolling out new deployment in dev ###'
                sh '''
                		oc project ${DEV_PROJECT}
                        oc set triggers dc/movies --manual 
						oc start-build bc/movies --from-file=movies/target/movies.jar --wait=true --follow=true
						oc rollout latest dc/movies
						oc set triggers dc/movies --auto
                   '''
            }
        }

        stage('Wait for deployment in DEV env') {
	    steps {
        	script {
			
        		openshift.withCluster() {
                      		openshift.withProject(env.DEV_PROJECT) {
                        		openshift
						.selector("dc", "${APP_NAME}")
						.related("pods").untilEach(1){
							return (it.object().status.phase == "Running")
						}
                      		}
                    	}
		}
	    }
	}

        stage('Promote to Staging Env') {
            steps {
                timeout(time: 60, unit: 'MINUTES') {
                    input message: "Promote to Staging?"
                }
                script {
                    openshift.withCluster() {
			sh 'oc tag ${DEV_PROJECT}/${APP_NAME}:latest ${STAGE_PROJECT}/${APP_NAME}:stage'
                    }
                }
            }
        }

        stage('Deploy to Staging Env') {
            steps {
                echo '### Cleaning existing resources in Staging ###'
                sh '''
                        oc project ${STAGE_PROJECT}
                        oc rollout latest dc/${APP_NAME}
                        sleep 5
                   '''
	    	}
        }

        stage('Wait for deployment in Staging') {
            steps {
                sh "oc get route ${APP_NAME} -n ${STAGE_PROJECT} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost"

                script {
                    routeHost = readFile('routehost').trim()

                    openshift.withCluster() {
                        openshift.withProject( "${STAGE_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                        echo "Deployment to Staging env is complete. Access the API endpoint at the URL http://${routeHost}/movies."
                    }
                }
            }
        }
    }
}
