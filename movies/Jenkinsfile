pipeline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 60, unit: 'MINUTES')
    }
    agent {
      node {
      		label 'maven'
	}
    }

    environment {
        //TODO: Customize these variables for your environment
        DEV_PROJECT = "fharo-redhat-com-movies-dev"
        STAGE_PROJECT = "fharo-redhat-com-movies-stage"
        APP_GIT_URL = "https://github.com/fgharo/DO288-apps"
        NEXUS_SERVER = "http://nexus-common.apps.ocp-na2.prod.nextcle.com/repository/java"

        // DO NOT CHANGE THE GLOBAL VARS BELOW THIS LINE
        APP_NAME = "movies"
        PATH_TO_BINARY_FILE = "movies/target/movies.jar"
    }


    stages {

        stage('Compilation Check') {
            steps {
                echo '### Checking for compile errors ###'
		    /*
                sh '''
                        cd ${APP_NAME}
                        mvn -s settings.xml -B clean compile
                   '''
		   */
            }
        }

        stage('Run Unit Tests') {
            steps {
                echo '### Running unit tests ###'
		    /*
                sh '''
                        cd ${APP_NAME}
                        mvn -s settings.xml -B clean test
                   '''
		   */
            }
        }

        stage('Static Code Analysis') {
            steps {
                echo '### Running pmd on code ###'
		    /*
                sh '''
                        cd ${APP_NAME}
                        mvn -s settings.xml -B clean pmd:check
                   '''
		   */
            }
        }

        stage('Create fat JAR') {
            steps {
                echo '### Creating fat JAR ###'
                sh '''
                        cd ${APP_NAME}
                        mvn -s settings.xml -B clean package -DskipTests=true
                   '''
            }
        }

        stage('Launch new app in DEV env') {
            steps {            	
                echo '### Rolling out new deployment in dev ###'
                sh '''
                	oc project ${DEV_PROJECT}
                        oc set triggers dc/${APP_NAME} --manual 
			oc start-build bc/${APP_NAME} --from-file=${PATH_TO_BINARY_FILE} --wait=true --follow=true
			oc rollout latest dc/${APP_NAME}
                   '''
            }
        }

        stage('Wait for deployment in DEV env') {
	    steps {
		waitOnRolloutCompletion(env.DEV_PROJECT, env.APP_NAME)
	    }
	}

        stage('Promote to Staging Env') {
            steps {
                timeout(time: 60, unit: 'MINUTES') {
                    input message: "Promote to Staging?"
                }
                sh '''
                	oc project ${STAGE_PROJECT}
                	oc set triggers dc/${APP_NAME} --manual
                	oc tag ${DEV_PROJECT}/${APP_NAME}:latest ${STAGE_PROJECT}/${APP_NAME}:stage
                   '''
            }
        }

        stage('Deploy to Staging Env') {
            steps {
                echo '### Cleaning existing resources in Staging ###'
                sh '''
                        oc project ${STAGE_PROJECT}
                        oc rollout latest dc/${APP_NAME}
                        sleep 5
                   '''
	    }
        }

        stage('Wait for deployment in Staging') {
            steps {
		waitOnRolloutCompletion(env.STAGE_PROJECT, env.APP_NAME)
		    
		script {
			sh "oc get route ${APP_NAME} -n ${STAGE_PROJECT} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost"
			routeHost = readFile('routehost').trim()
			echo "Deployment to Staging env is complete. Access the API endpoint at the URL http://${routeHost}/movies."
		}
            }
        }
    }
}

def waitOnRolloutCompletion(project, app){
	 sh "oc project ${project}"
	 def dc_version = sh(returnStdout: true, script: "oc get dc ${app} --template={{.status.latestVersion}}").trim()
	 def replication_controller = app + "-" + dc_version 

         def currentNumOfReplicas = sh(returnStdout: true, script: "oc get rc ${replication_controller} --template={{.status.readyReplicas}}").trim() 
	 def expectedNumOfReplicas = sh(returnStdout: true, script: "oc get rc ${replication_controller} --template={{.status.replicas}}").trim()
	
	 echo "Waiting for ReplicationController ${replication_controller} to replicate expected number of replicas."
	 while (currentNumOfReplicas != expectedNumOfReplicas){
            sleep 5
            currentNumOfReplicas = sh(returnStdout: true, script: "oc get rc ${replication_controller} --template={{.status.readyReplicas}}").trim() 
	    expectedNumOfReplicas = sh(returnStdout: true, script: "oc get rc ${replication_controller} --template={{.status.replicas}}").trim()
	    echo "${currentNumOfReplicas} vs ${expectedNumOfReplicas}"
	 }
}
